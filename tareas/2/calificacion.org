#+title: Asignaci√≥n de memoria
#+author: Gunnar Wolf

- Edgar Guadarrama ::
  - C√≥digo :: [[./GuadarramaEdgar/tarea2.c][tarea2.c]]
  - Lenguaje :: C
  - Comentarios ::
    - ¬°Muy bien resuelto!
    - Recomendaci√≥n: Est√°s utilizando los comentarios como
      micro-documentaci√≥n de uso. Si bien es v√°lido en una tarea, te
      crea malas pr√°cticas a futuro. Los comentarios deben ser
      informaci√≥n √∫til /al programador/ que se acerque a tu c√≥digo. La
      documentaci√≥n (como tus l√≠neas 117 y 121) deber√≠a ser un archivo
      aparte, orientado a tus /usuarios/.
  - Calificaci√≥n :: 10

- An√≠bal Medina y Guadalupe Moreno ::
  - C√≥digo :: [[./MorenoGuadalupe-MedinaAnibal/Asignador.java][Asignador.java]]
  - Lenguaje :: Java
  - Comentarios ::
    - ¬°Buena implementaci√≥n! (¬øven c√≥mo s√≠ soy capaz de decir eso de
      un programa en Java? ‚ò∫)
    - C√≥modo y √∫til que los procesos que se vayan asignando vayan
      tomando letras y tama√±os aleatorios. Sin embargo, dado que no
      reporta el tama√±o del proceso que intentar√≠a asignar, tuve que
      "picarle" varias veces para convencerme de que no implementa
      compactaci√≥n. Vamos:
      #+BEGIN_SRC text
      Entra proceso (W) de tama√±o 10
      CCCHHHIIIIIIIIIIIIIWWWWWWWWWW-

      s
      Se elimin√≥ al proceso H
      CCC---IIIIIIIIIIIIIWWWWWWWWWW-

      a
      No hay espacio suficiente para el proceso D
      CCC---IIIIIIIIIIIIIWWWWWWWWWW-

      a
      Entra proceso (X) de tama√±o 2
      CCCXX-IIIIIIIIIIIIIWWWWWWWWWW-
      #+END_SRC
    - Y, s√≠... Les falt√≥ implementar la compactaci√≥n.
  - Calificaci√≥n :: 9

- Miguel P√©rez ::
  - C√≥digo :: [[./PerezMiguel/Memoria.java][Memoria.java]], [[./PerezMiguel/TestMemoria.java][TestMemoria.java]]
  - Lenguaje :: Java
  - Comentarios ::
    - ¬°Bien! Asigna, libera, compacta, reporta errores... ¬øQu√© m√°s
      puedo pedir? ‚ò∫
    - Tu c√≥digo no compila tal como lo mandaste:
      #+BEGIN_SRC text
	$ javac TestMemoria.java 
	./Memoria.java:140: error: cannot find symbol
			if(Tabla.asigna(nombre, tamanio) == 1)
			   ^
	  symbol:   variable Tabla
	  location: class Memoria
	1 error
      #+END_SRC
      Basta con quitar =Tabla.= para que funcione. ¬øQu√© pas√≥ ah√≠? :-]
  - Calificaci√≥n :: 10

- Sim√≥n Ram√≠rez ::
  - C√≥digo :: [[./RamirezSimon/asigMem.py][asigMem.py]]
  - Lenguaje :: Python
  - Comentarios ::
    - ¬øArchivo vac√≠o? ‚òπ ¬øNo hubo entrega?
  - Calificaci√≥n :: 0

- Miguel Aguilar ::
  - C√≥digo :: [[./AguilarMiguel/asignador.c][asignador.c]]
  - Lenguaje :: C
  - Comentarios ::
    - Tu programa depende de un archivo que indique c√≥mo
      asignar/emplear la memoria. Este archivo debe seguir un formato
      en espec√≠fico. ¬°Pero no incluyes documentaci√≥n! Tuve que generar
      el archivo b√°sicamente por /ingenier√≠a inversa/ ‚Äî Viendo lo que
      tu programa /busca hacer/ con √©l.
    - Tu programa en general es /muy bueno/ ‚Äî Con un par de
      anotaciones importantes, s√≠, pero la forma en que lo resolviste
      es muy buena.
      - En primer lugar, solicit√© /asignaci√≥n contigua/. Tu programa
        asigna espacio en memoria incluso si no puede satisfacerse. Al
        detectar que la memoria no puede asignarse de forma contigua,
        deber√≠as forzar una /compactaci√≥n/
      - En segundo lugar, tu funci√≥n =asigMemoria()= no contempla el
        caso de que no haya memoria suficiente para satisfacer la
        solicitud. Si bien verificas y podr√≠as imprimir =No se pudo
        asignar= (l√≠nea 110), nunca llegas ah√≠. Por ejemplo, indicando
        las siguientes solicitudes, tu programa se queda en un ciclo
        eterno, nom√°s quemando CPU:
	#+BEGIN_SRC text
	1 14
	2 3
	#+END_SRC
  - Calificaci√≥n :: 0 (entrega m√°s de una semana despu√©s de la fecha l√≠mite)

- Karla Guzm√°n ::
  - C√≥digo :: [[./Guzm√°nKarla/asigmem.py][asigmem.py]]
  - Lenguaje :: Python
  - Comentarios ::
    - Buena implementaci√≥n, aunque con un par de detalles
    - Al intentar quitar un proceso, Python manda un error:
      #+BEGIN_SRC text
	1 => Agregar proceso
	2 => Quitar proceso
	0 => Salir
	$$ 2
	ingresa el nombre del proceso: Z
	Traceback (most recent call last):
	  File "asigmem.py", line 110, in <module>
	    control()
	  File "asigmem.py", line 108, in control
	    opcion(numero)
	  File "asigmem.py", line 94, in opcion
	    vacia_memoria(proceso, tamano)
	  File "asigmem.py", line 31, in vacia_memoria
	    while contador1 > 0:
	UnboundLocalError: local variable 'contador1' referenced before assignment
      #+END_SRC
      Esto es porque est√°s asignando (l√≠nea 30) un valor a la variable
      =contador=, pero en la siguiente l√≠nea la utilizas como
      =contador1=. Corrigiendo el nombre de la variable, el programa
      funciona bien.
    - Tu programa detecta correctamente la compactaci√≥n de memoria,
      /pero no la efect√∫a/, y realiza asignaci√≥n de memoria no
      contigua:
      #+BEGIN_SRC text
	1 => Agregar proceso
	2 => Quitar proceso
	0 => Salir
	$$ 1
	ingresa el nombre del proceso: G
	ingresa el tama√±o de tu proceso: 6
	se requiere compactar la memoria

	Mapa de memoria 

	|A| |A| |A| |A| |A| |A| |A| |A| |A| |A| 

	|A| |A| |A| |A| |A| |G| |G| |G| |B| |B| 

	|B| |R| |R| |R| |R| |G| |G| |G| |*| |*| 
      #+END_SRC
  - Calificaci√≥n :: 0 (entrega m√°s de una semana despu√©s de la fecha l√≠mite)

- Andrew S√°nchez ::
  - C√≥digo :: [[./SanchezAndrew/Tarea2.py][Tarea2.py]]
  - Documentaci√≥n :: [[./SanchezAndrew/Documentacion.txt][Documentacion.txt]]
  - Lenguaje :: Python
  - Comentarios ::
    - El programa es b√°sicamente el mismo que el entregado por Karla
      Guzm√°n, los comentarios a aquel valen para este
    - No hay problema, el problema estaba planteado para resolverse
      /de forma individual o en equipos de 2 personas/ üòâ
      - Adem√°s... De todos modos, no alcanzaron calificaci√≥n ‚òπ
  - Calificaci√≥n :: 0 (entrega m√°s de una semana despu√©s de la fecha l√≠mite)
